/* "Universal" application to the index code*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Basic values for properties for the page in general */
header {
    padding: 20px 35px;
    background-color: #39a6b2;
}

header h1 {
    font-weight: bold;
    font-size: 36px;
    color: #fce138;
    margin: 0;
    display: inline;
}

header a {
    text-decoration: none;
    color: #fce138;
}

header nav {
    float: right;
    margin: 7px 0;
}

header nav ul li {
    display: inline;
}

header nav ul li a {
    margin: 0 30px;
    font-weight: lighter;
    font-size: 22px;
}

body {
    color: #39a6b2;
    font-family: Helvetica, Arial, sans-serif;
}

footer {
    background: #fce138;
    width: 100%;
    padding: 40px 35px;
}

footer h2 {
    display: inline;
    color: #024e76;
    font-size: 30px;
    margin: 0;
}

footer div {
    float: right;
    line-height: 1.5;
    text-align: right;
}

footer a {
    color: #024e76;
}

/* Gives some space from outer edge to give the site a much more filled and balanced look as opposed to be squished all on one side*/
section {
    padding: 60px;
}

.section-title {
    font-size: 55px;
    color: #024e76;
    margin-bottom: 35px;
    padding: 0 100px 20px 100px;

/*  We chose to use the inline-block value instead of the inline value so it can have the best of both worlds. 
It's now an inline element, but things like padding still behave like they would on block elements. */

    display: inline-block;
    border-bottom: 3px solid;
}

/* Because the previous headers were similar in properties we simplified them by placing them under one class with one seperate distinction
which is the differences in border*/

.primary-border {
    border-color: #fce138;
}
  
.secondary-border {
    border-color: #39a6b2;
}

.text-left {
    text-align: left;
}
  
.text-right {
    text-align: right;
}




/* Hero Style Start */
.hero {
    background-image: url("../images/hero-bg.jpg");
    height: 600px;

    /* The background size and position allows for the image to adjust its fit to whatever screen it is on so it does not look stretched or clipped*/

    background-size: cover;
    background-position: center;
    position: relative;
} 

.hero-form {
    background-color: #fce138;
    padding: 20px;
    width: 500px;
    color: #024e76;

    /* You can just add in all 3 values into one line as long as it is pertaining to that specific property */

    border: solid 3px #024e76;
    position: absolute;
    bottom: 120px;
    right: 140px;
}

.form-input {
    border: 1px solid #024e76;
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: #024e76;
    width: 100%;
    margin-bottom: 15px;
}

.hero-form h3 {
    font-size: 24px;
    margin: 0;
}
  
.hero-form p {
    margin: 5px 0 15px 0;
}

.hero-form label {
    margin: 0 5px;
}

.hero-form button {
    color: #fce138;
    background-color: #024e76;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
}
/* Hero Style End */
 



/* Introduction Style Start */
.intro {
    text-align: center;
}

.intro p {
    line-height: 1.7;
    color: #39a6b2;
    width: 80%;
    font-size: 20px;

/*  Only works for horizontal centering. margin: auto 0 does not vertically center elements.*/

    margin: 0 auto;
}
/* Introduction Style End */



/* Steps Style Start */
.steps { 
    text-align: center;
    background: #fce138;
}

.steps div {
    margin-bottom: 80px;
}
  
.steps img {
    width: 15%;
    margin: 10px 0;
} 
  
.steps h3 {
    color: #024e76;
    font-size: 46px;
    margin-top: 10px;
}
  
.steps p {
    color: #39a6b2;
    font-size: 23px;
}

.steps span {
    /* Used to seperately define fonts within the same text*/
    font-size: 38px;
}
/* Steps Style End */



/* Trainers and trainer Style Start */
.trainers {
    text-align: center;
}

.trainer {
    width: 900px;
    margin: 0 auto 30px auto;
    background: #024e76;
    color: #fce138;

    /*The overflow fix we applied told the trainer's <article> element that it does in fact have content inside of it and that it needs to look for it and account for those two floated HTML elements' sizes. 
    This is what's known as providing block formatting context to the element.
    Setting the overflow property to auto allows the parent element to become aware of its child elements and stretch its dimensions to contain them. */

    overflow: auto;
  }

.trainer img {
    width: 35%;
    float: left;
    overflow: auto;
}
  
.trainer-bio {
    padding: 35px;
    float: left;
    width: 65%;
    overflow: auto;
}
.trainer-bio h3 {
    font-size: 32px;
    margin-bottom: 8px;
}
  
.trainer-bio h4 {
    font-weight: lighter;
    font-size: 26px;
    margin-bottom: 25px;
}
  
.trainer-bio p {
    font-size: 17px;
    line-height: 1.3;
}